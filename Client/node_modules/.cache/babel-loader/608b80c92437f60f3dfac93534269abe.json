{"ast":null,"code":"import _defineProperty from \"/Users/eddieruiz/Desktop/AInomads/alteredFuture/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/eddieruiz/Desktop/AInomads/alteredFuture/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/eddieruiz/Desktop/AInomads/alteredFuture/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\n/* \n\n// ----- Custom Hook useForm -----\n\n// You can use this custom Hook in a component\n\n// To initialize, you have to write the following\nconst initialValues = { carrot: \"orange\"  }\nconst { formValues, getInputProps, handleChange } = useForm(initialValues)\n\n// - formValues: an object with all the values of a from\n// - getInputProps: a function to get the props of an input\n// - handleChange: the handler function for forms (optional most of the time)\n// - initialValue: the initial for formValues\n\n// Then to insert a <input>, <textarea> or <select>, it's really easy!\n<input type=\"text\" {...getInputProps('carrot')} />\n<select {...getInputProps('lang')}>\n  <option value=\"fr\">French</option>\n  <option value=\"en\">English</option>\n</select>\n\n// Then you can access the values typed very easily:\nformValues.carrot\nformValues.lang\n\n// You can see an example in: client/src/components/pages/Login.jsx\n\n*/\n\nexport function useForm() {\n  var initialValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _useState = useState(initialValues),\n      _useState2 = _slicedToArray(_useState, 2),\n      formValues = _useState2[0],\n      setFormValues = _useState2[1];\n\n  function handleChange(event) {\n    var value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\n    setFormValues(_objectSpread({}, formValues, _defineProperty({}, event.target.name, value)));\n  }\n\n  function getInputProps(fieldName) {\n    return {\n      name: fieldName,\n      value: formValues[fieldName] || '',\n      checked: formValues[fieldName] || false,\n      onChange: handleChange\n    };\n  }\n\n  return {\n    formValues: formValues,\n    getInputProps: getInputProps,\n    handleChange: handleChange\n  };\n}","map":{"version":3,"sources":["/Users/eddieruiz/Desktop/AInomads/alteredFuture/client/src/hooks.js"],"names":["useState","useForm","initialValues","formValues","setFormValues","handleChange","event","value","target","type","checked","name","getInputProps","fieldName","onChange"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAO,SAASC,OAAT,GAAqC;AAAA,MAApBC,aAAoB,uEAAJ,EAAI;;AAAA,kBACNF,QAAQ,CAACE,aAAD,CADF;AAAA;AAAA,MACnCC,UADmC;AAAA,MACvBC,aADuB;;AAG1C,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAIC,KAAK,GACPD,KAAK,CAACE,MAAN,CAAaC,IAAb,KAAsB,UAAtB,GACIH,KAAK,CAACE,MAAN,CAAaE,OADjB,GAEIJ,KAAK,CAACE,MAAN,CAAaD,KAHnB;AAIAH,IAAAA,aAAa,mBACRD,UADQ,sBAEVG,KAAK,CAACE,MAAN,CAAaG,IAFH,EAEUJ,KAFV,GAAb;AAID;;AAED,WAASK,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,WAAO;AACLF,MAAAA,IAAI,EAAEE,SADD;AAELN,MAAAA,KAAK,EAAEJ,UAAU,CAACU,SAAD,CAAV,IAAyB,EAF3B;AAGLH,MAAAA,OAAO,EAAEP,UAAU,CAACU,SAAD,CAAV,IAAyB,KAH7B;AAILC,MAAAA,QAAQ,EAAET;AAJL,KAAP;AAMD;;AAED,SAAO;AACLF,IAAAA,UAAU,EAAVA,UADK;AAELS,IAAAA,aAAa,EAAbA,aAFK;AAGLP,IAAAA,YAAY,EAAZA;AAHK,GAAP;AAKD","sourcesContent":["import { useState } from 'react'\n\n/* \n\n// ----- Custom Hook useForm -----\n\n// You can use this custom Hook in a component\n\n// To initialize, you have to write the following\nconst initialValues = { carrot: \"orange\"  }\nconst { formValues, getInputProps, handleChange } = useForm(initialValues)\n\n// - formValues: an object with all the values of a from\n// - getInputProps: a function to get the props of an input\n// - handleChange: the handler function for forms (optional most of the time)\n// - initialValue: the initial for formValues\n\n// Then to insert a <input>, <textarea> or <select>, it's really easy!\n<input type=\"text\" {...getInputProps('carrot')} />\n<select {...getInputProps('lang')}>\n  <option value=\"fr\">French</option>\n  <option value=\"en\">English</option>\n</select>\n\n// Then you can access the values typed very easily:\nformValues.carrot\nformValues.lang\n\n// You can see an example in: client/src/components/pages/Login.jsx\n\n*/\nexport function useForm(initialValues = {}) {\n  const [formValues, setFormValues] = useState(initialValues)\n\n  function handleChange(event) {\n    let value =\n      event.target.type === 'checkbox'\n        ? event.target.checked\n        : event.target.value\n    setFormValues({\n      ...formValues,\n      [event.target.name]: value,\n    })\n  }\n\n  function getInputProps(fieldName) {\n    return {\n      name: fieldName,\n      value: formValues[fieldName] || '',\n      checked: formValues[fieldName] || false,\n      onChange: handleChange,\n    }\n  }\n\n  return {\n    formValues,\n    getInputProps,\n    handleChange,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}