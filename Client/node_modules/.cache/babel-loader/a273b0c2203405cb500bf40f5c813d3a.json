{"ast":null,"code":"import axios from 'axios';\nconsole.log(process.env.NODE_ENV);\nvar service = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : \"http://\".concat(window.location.hostname, \":5000/api\"),\n  withCredentials: true\n});\n\nvar errHandler = function errHandler(err) {\n  console.error(err);\n\n  if (err.response && err.response.data) {\n    console.error('API response', err.response.data);\n    throw err.response.data.message;\n  }\n\n  throw err;\n};\n\nexport default {\n  service: service,\n  // This method is synchronous and returns true or false\n  // To know if the user is connected, we just check if we have a value for localStorage.getItem('user')\n  isLoggedIn: function isLoggedIn() {\n    return localStorage.getItem('user') != null;\n  },\n  // This method returns the user from the localStorage\n  // Be careful, the value is the one when the user logged in for the last time\n  getLocalStorageUser: function getLocalStorageUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  },\n  // This method signs up and logs in the user\n  signup: function signup(userInfo) {\n    return service.post('/signup', userInfo).then(function (res) {\n      // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n      localStorage.setItem('user', JSON.stringify(res.data));\n      return res.data;\n    }).catch(errHandler);\n  },\n  login: function login(username, password) {\n    return service.post('/login', {\n      username: username,\n      password: password\n    }).then(function (res) {\n      // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n      localStorage.setItem('user', JSON.stringify(res.data));\n      return res.data;\n    }).catch(errHandler);\n  },\n  logout: function logout() {\n    localStorage.removeItem('user');\n    return service.get('/logout');\n  },\n  // This is an example on how to use this method in a different file\n  // api.getCountries().then(countries => { /* ... */ })\n  getCountries: function getCountries() {\n    return service.get('/countries').then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  },\n  addCountry: function addCountry(body) {\n    return service.post('/countries', body).then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  },\n  getSecret: function getSecret() {\n    return service.get('/secret').then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  },\n  addPicture: function addPicture(file) {\n    var formData = new FormData();\n    formData.append('picture', file);\n    return service.post('/endpoint/to/add/a/picture', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(function (res) {\n      return res.data;\n    }).catch(errHandler);\n  }\n};","map":{"version":3,"sources":["/Users/eddieruiz/Desktop/AInomads/newTest/fullStackAssesment/Client/src/api.js"],"names":["axios","console","log","process","env","NODE_ENV","service","create","baseURL","window","location","hostname","withCredentials","errHandler","err","error","response","data","message","isLoggedIn","localStorage","getItem","getLocalStorageUser","JSON","parse","signup","userInfo","post","then","res","setItem","stringify","catch","login","username","password","logout","removeItem","get","getCountries","addCountry","body","getSecret","addPicture","file","formData","FormData","append","headers"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nconsole.log(process.env.NODE_ENV)\n\nconst service = axios.create({\n  baseURL:\n    process.env.NODE_ENV === 'production'\n      ? '/api'\n      : `http://${window.location.hostname}:5000/api`,\n\n  withCredentials: true,\n})\n\nconst errHandler = err => {\n  console.error(err)\n  if (err.response && err.response.data) {\n    console.error('API response', err.response.data)\n    throw err.response.data.message\n  }\n  throw err\n}\n\nexport default {\n  service: service,\n\n  // This method is synchronous and returns true or false\n  // To know if the user is connected, we just check if we have a value for localStorage.getItem('user')\n  isLoggedIn() {\n    return localStorage.getItem('user') != null\n  },\n\n  // This method returns the user from the localStorage\n  // Be careful, the value is the one when the user logged in for the last time\n  getLocalStorageUser() {\n    return JSON.parse(localStorage.getItem('user'))\n  },\n\n  // This method signs up and logs in the user\n  signup(userInfo) {\n    return service\n      .post('/signup', userInfo)\n      .then(res => {\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        localStorage.setItem('user', JSON.stringify(res.data))\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  login(username, password) {\n    return service\n      .post('/login', {\n        username,\n        password,\n      })\n      .then(res => {\n        // If we have localStorage.getItem('user') saved, the application will consider we are loggedin\n        localStorage.setItem('user', JSON.stringify(res.data))\n        return res.data\n      })\n      .catch(errHandler)\n  },\n\n  logout() {\n    localStorage.removeItem('user')\n    return service.get('/logout')\n  },\n\n  // This is an example on how to use this method in a different file\n  // api.getCountries().then(countries => { /* ... */ })\n  getCountries() {\n    return service\n      .get('/countries')\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n\n  addCountry(body) {\n    return service\n      .post('/countries', body)\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n\n  getSecret() {\n    return service\n      .get('/secret')\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n\n  addPicture(file) {\n    const formData = new FormData()\n    formData.append('picture', file)\n    return service\n      .post('/endpoint/to/add/a/picture', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      })\n      .then(res => res.data)\n      .catch(errHandler)\n  },\n}\n"]},"metadata":{},"sourceType":"module"}